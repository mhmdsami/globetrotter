// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model Destination {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  country   String
  clues     String[]
  funFacts  String[]
  trivia    String[]
  games     Game[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("destinations")
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  email              String        @unique
  password           String?
  score              Int           @default(0)
  gameSessions       GameSession[]
  createdChallenges  Challenge[]   @relation(name: "CreatorRelation")
  receivedChallenges Challenge[]   @relation(name: "OpponentRelation")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt

  @@map("users")
}

type GameMetadata {
  clueIndex    Int
  funFactIndex Int
  triviaIndex  Int
}

model Game {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  session       GameSession  @relation(fields: [sessionId], references: [id])
  sessionId     String       @db.ObjectId
  metadata      GameMetadata
  destinationId String       @db.ObjectId
  destination   Destination  @relation(fields: [destinationId], references: [id])
  guessCount    Int          @default(0)
  isCorrect     Boolean?
  guessedAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt

  @@map("games")
}

model GameSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  score     Int      @default(0)
  games     Game[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("sessions")
}

model Challenge {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  creator    User     @relation(name: "CreatorRelation", fields: [creatorId], references: [id])
  creatorId  String   @db.ObjectId
  player     User     @relation(name: "OpponentRelation", fields: [playerId], references: [id])
  playerId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  isAccepted Boolean  @default(false)

  @@map("challenges")
}
